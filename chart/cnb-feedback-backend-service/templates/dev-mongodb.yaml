{{ if .Values.dev.mongodb.enable }}
kind: Service
apiVersion: v1
metadata:
  name: mongo
spec:
  selector:
    app: mongo
  type: ClusterIP
  ports:
    - port: 27017
      targetPort: 27017
      protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: mongo
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - image: {{.Values.dev.mongodb.image}}
        imagePullPolicy: IfNotPresent
        name: mongo
        ports:
        - containerPort: 27017
          protocol: TCP
        resources:
          {{ toYaml .Values.dev.mongodb.resources | nindent 12 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
{{ end }}
{{ if .Values.dev.mongoExpress.enable }}
{{- if and  (eq .Values.dev.mongoExpress.expose "oc-route") .Values.common.clusterDomain }}
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    "helm.sh/hook": post-install,post-upgrade
  labels:
    app: mongo-express
  name: mongo-express
spec:
  host: {{ printf "mongo-express-%s.%s" .Release.Name .Values.common.clusterDomain }}
  port:
    targetPort: http
  to:
    kind: Service
    name: mongo-express
    weight: 100
  tls:
    termination: edge
  wildcardPolicy: None
---
{{- end }}
{{ if and (eq .Values.dev.mongoExpress.expose "ingress") .Values.common.clusterDomain }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mongo-express
  {{ if .Values.common.ingressClass }}
  annotations:
    kubernetes.io/ingress.class: {{ .Values.common.ingressClass }}
  {{ end }}
spec:
  {{ if .Values.common.ingressSecretName }}
  tls:
    - hosts:
        - {{ printf "mongo-express-%s.%s" .Release.Name .Values.common.clusterDomain }}
      secretName: {{.Values.common.ingressSecretName}}
  {{ end }}
  rules:
    - host: {{ printf "mongo-express-%s.%s" .Release.Name .Values.common.clusterDomain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: mongo-express
                port:
                  number: 80
---
{{ end }}

kind: Service
apiVersion: v1
metadata:
  name: mongo-express
spec:
  selector:
    app: mongo-express
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8081
      protocol: TCP
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo-express
  name: mongo-express
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: mongo-express
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - image: {{.Values.dev.mongoExpress.image}}
        imagePullPolicy: IfNotPresent
        name: mongo-express
        ports:
        - containerPort: 8081
          protocol: TCP
        resources:
          {{ toYaml .Values.dev.mongoExpress.resources | nindent 12 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
{{ end }}